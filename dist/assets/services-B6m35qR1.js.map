{"version":3,"file":"services-B6m35qR1.js","sources":["../../src/config/supabase.ts","../../src/services/connectionMonitor.ts","../../src/services/dashboard.ts","../../src/services/api.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\nconst supabaseServiceRoleKey = import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables')\n}\n\n// Regular client for user operations with enhanced connection handling\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'pkce'\n  },\n  realtime: {\n    params: {\n      eventsPerSecond: 10\n    }\n  },\n  global: {\n    headers: {\n      'X-Client-Info': 'petsmart-admin'\n    }\n  }\n})\n\n// Admin client with service role key for admin operations\nexport const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey || supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false\n  },\n  global: {\n    headers: {\n      'X-Client-Info': 'petsmart-admin-service'\n    }\n  }\n})\n\n// Database types\nexport interface Database {\n  public: {\n    Tables: {\n      profiles: {\n        Row: {\n          id: string\n          username: string | null\n          profile_pic: string | null\n          phone_number: string | null\n          birthdate: string | null\n          created_at: string | null\n          first_name: string | null\n          last_name: string | null\n          mobile_number: string | null\n          bio: string | null\n          updated_at: string | null\n          profile_visibility: boolean | null\n          data_sharing_enabled: boolean | null\n          two_factor_enabled: boolean | null\n          last_password_change: string | null\n          security_notifications: boolean | null\n          is_active: boolean | null\n        }\n        Insert: {\n          id: string\n          username?: string | null\n          profile_pic?: string | null\n          phone_number?: string | null\n          birthdate?: string | null\n          created_at?: string | null\n          first_name?: string | null\n          last_name?: string | null\n          mobile_number?: string | null\n          bio?: string | null\n          updated_at?: string | null\n          email_verified?: boolean | null\n          profile_visibility?: boolean | null\n          data_sharing_enabled?: boolean | null\n          two_factor_enabled?: boolean | null\n          last_password_change?: string | null\n          security_notifications?: boolean | null\n          is_active?: boolean | null\n        }\n        Update: {\n          id?: string\n          username?: string | null\n          profile_pic?: string | null\n          phone_number?: string | null\n          birthdate?: string | null\n          created_at?: string | null\n          first_name?: string | null\n          last_name?: string | null\n          mobile_number?: string | null\n          bio?: string | null\n          updated_at?: string | null\n          email_verified?: boolean | null\n          profile_visibility?: boolean | null\n          data_sharing_enabled?: boolean | null\n          two_factor_enabled?: boolean | null\n          last_password_change?: string | null\n          security_notifications?: boolean | null\n          is_active?: boolean | null\n        }\n      }\n      pets: {\n        Row: {\n          id: string\n          user_id: string | null\n          name: string\n          type: string | null\n          gender: string | null\n          created_at: string | null\n          is_active: boolean | null\n          updated_at: string | null\n        }\n        Insert: {\n          id?: string\n          user_id?: string | null\n          name: string\n          type?: string | null\n          gender?: string | null\n          created_at?: string | null\n          is_active?: boolean | null\n          updated_at?: string | null\n        }\n        Update: {\n          id?: string\n          user_id?: string | null\n          name?: string\n          type?: string | null\n          gender?: string | null\n          created_at?: string | null\n          is_active?: boolean | null\n          updated_at?: string | null\n        }\n      }\n      appointments: {\n        Row: {\n          id: string\n          user_id: string | null\n          pet_id: string | null\n          appointment_date: string\n          appointment_time: string\n          status: string | null\n          created_at: string | null\n          day_slot_id: string | null\n          updated_at: string | null\n        }\n        Insert: {\n          id?: string\n          user_id?: string | null\n          pet_id?: string | null\n          appointment_date: string\n          appointment_time: string\n          status?: string | null\n          created_at?: string | null\n          day_slot_id?: string | null\n          updated_at?: string | null\n        }\n        Update: {\n          id?: string\n          user_id?: string | null\n          pet_id?: string | null\n          appointment_date?: string\n          appointment_time?: string\n          status?: string | null\n          created_at?: string | null\n          day_slot_id?: string | null\n          updated_at?: string | null\n        }\n      }\n      day_slots: {\n        Row: {\n          id: string\n          day_of_week: string\n          time_slot: string\n          is_active: boolean | null\n          max_capacity: number\n          end_time: string\n        }\n        Insert: {\n          id?: string\n          day_of_week: string\n          time_slot: string\n          is_active?: boolean | null\n          max_capacity: number\n          end_time: string\n        }\n        Update: {\n          id?: string\n          day_of_week?: string\n          time_slot?: string\n          is_active?: boolean | null\n          max_capacity?: number\n          end_time?: string\n        }\n      }\n      products: {\n        Row: {\n          id: string\n          title: string\n          description: string | null\n          price: number\n          created_at: string | null\n          quantity: number\n          discount_percentage: number | null\n          original_price: number | null\n          is_on_sale: boolean | null\n          sale_start_date: string | null\n          sale_end_date: string | null\n        }\n        Insert: {\n          id?: string\n          title: string\n          description?: string | null\n          price: number\n          created_at?: string | null\n          quantity: number\n          discount_percentage?: number | null\n          original_price?: number | null\n          is_on_sale?: boolean | null\n          sale_start_date?: string | null\n          sale_end_date?: string | null\n        }\n        Update: {\n          id?: string\n          title?: string\n          description?: string | null\n          price?: number\n          created_at?: string | null\n          quantity?: number\n          discount_percentage?: number | null\n          original_price?: number | null\n          is_on_sale?: boolean | null\n          sale_start_date?: string | null\n          sale_end_date?: string | null\n        }\n      }\n      orders: {\n        Row: {\n          id: string\n          user_id: string | null\n          total_amount: number\n          status: string | null\n          confirmed_by_user: boolean | null\n          created_at: string | null\n          delivery_address_id: string | null\n          delivery_fee: number | null\n          tax_amount: number | null\n          subtotal: number | null\n          estimated_delivery_date: string | null\n          delivered_at: string | null\n          confirmed_at: string | null\n          notes: string | null\n        }\n        Insert: {\n          id?: string\n          user_id?: string | null\n          total_amount: number\n          status?: string | null\n          confirmed_by_user?: boolean | null\n          created_at?: string | null\n          delivery_address_id?: string | null\n          delivery_fee?: number | null\n          tax_amount?: number | null\n          subtotal?: number | null\n          estimated_delivery_date?: string | null\n          delivered_at?: string | null\n          confirmed_at?: string | null\n          notes?: string | null\n        }\n        Update: {\n          id?: string\n          user_id?: string | null\n          total_amount?: number\n          status?: string | null\n          confirmed_by_user?: boolean | null\n          created_at?: string | null\n          delivery_address_id?: string | null\n          delivery_fee?: number | null\n          tax_amount?: number | null\n          subtotal?: number | null\n          estimated_delivery_date?: string | null\n          delivered_at?: string | null\n          confirmed_at?: string | null\n          notes?: string | null\n        }\n      }\n      messages: {\n        Row: {\n          id: string\n          sender_id: string | null\n          receiver_id: string | null\n          message: string\n          sent_at: string | null\n        }\n        Insert: {\n          id?: string\n          sender_id?: string | null\n          receiver_id?: string | null\n          message: string\n          sent_at?: string | null\n        }\n        Update: {\n          id?: string\n          sender_id?: string | null\n          receiver_id?: string | null\n          message?: string\n          sent_at?: string | null\n        }\n      }\n      notifications: {\n        Row: {\n          id: string\n          user_id: string\n          title: string\n          message: string\n          type: string\n          data: any | null\n          is_read: boolean | null\n          created_at: string | null\n          read_at: string | null\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          title: string\n          message: string\n          type: string\n          data?: any | null\n          is_read?: boolean | null\n          created_at?: string | null\n          read_at?: string | null\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          title?: string\n          message?: string\n          type?: string\n          data?: any | null\n          is_read?: boolean | null\n          created_at?: string | null\n          read_at?: string | null\n        }\n      }\n      admin_users: {\n        Row: {\n          id: string\n          email: string\n          role: string\n          created_at: string | null\n          created_by: string | null\n          is_active: boolean | null\n        }\n        Insert: {\n          id?: string\n          email: string\n          role: string\n          created_at?: string | null\n          created_by?: string | null\n          is_active?: boolean | null\n        }\n        Update: {\n          id?: string\n          email?: string\n          role?: string\n          created_at?: string | null\n          created_by?: string | null\n          is_active?: boolean | null\n        }\n      }\n    }\n  }\n}\n","import { ref, nextTick } from 'vue'\nimport { supabase, supabaseAdmin } from '@/config/supabase'\nimport { useAuthStore } from '@/stores/auth'\n\nexport class ConnectionMonitor {\n  private static instance: ConnectionMonitor\n  private isMonitoring = false\n  private healthCheckInterval: number | null = null\n  private reconnectAttempts = 0\n  private maxReconnectAttempts = 3\n  private lastActivity = Date.now()\n  private visibilityChangeHandler: (() => void) | null = null\n  private focusHandler: (() => void) | null = null\n  private blurHandler: (() => void) | null = null\n\n  // Reactive state\n  public isConnected = ref(true)\n  public isReconnecting = ref(false)\n  public lastHealthCheck = ref<Date | null>(null)\n\n  private constructor() {}\n\n  static getInstance(): ConnectionMonitor {\n    if (!ConnectionMonitor.instance) {\n      ConnectionMonitor.instance = new ConnectionMonitor()\n    }\n    return ConnectionMonitor.instance\n  }\n\n  // Start monitoring connection health\n  startMonitoring() {\n    if (this.isMonitoring) return\n\n    console.log('🔍 Starting connection monitoring...')\n    this.isMonitoring = true\n    this.setupEventListeners()\n    this.startHealthChecks()\n  }\n\n  // Stop monitoring\n  stopMonitoring() {\n    console.log('🛑 Stopping connection monitoring...')\n    this.isMonitoring = false\n    this.cleanup()\n  }\n\n  // Setup browser event listeners\n  private setupEventListeners() {\n    // Handle visibility change (tab switching)\n    this.visibilityChangeHandler = () => {\n      if (document.visibilityState === 'visible') {\n        console.log('👁️ Tab became visible, checking connection...')\n        this.handleTabVisible()\n      } else {\n        console.log('🙈 Tab became hidden')\n        this.handleTabHidden()\n      }\n    }\n\n    // Handle window focus/blur\n    this.focusHandler = () => {\n      console.log('🎯 Window focused, refreshing connection...')\n      this.handleWindowFocus()\n    }\n\n    this.blurHandler = () => {\n      console.log('😴 Window blurred')\n      this.lastActivity = Date.now()\n    }\n\n    document.addEventListener('visibilitychange', this.visibilityChangeHandler)\n    window.addEventListener('focus', this.focusHandler)\n    window.addEventListener('blur', this.blurHandler)\n\n    // Track user activity\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart']\n    const updateActivity = () => {\n      this.lastActivity = Date.now()\n    }\n\n    activityEvents.forEach(event => {\n      document.addEventListener(event, updateActivity, { passive: true })\n    })\n  }\n\n  // Start periodic health checks\n  private startHealthChecks() {\n    // Initial health check\n    this.performHealthCheck()\n\n    // Set up interval for regular checks\n    this.healthCheckInterval = window.setInterval(() => {\n      this.performHealthCheck()\n    }, 30000) // Check every 30 seconds\n  }\n\n  // Perform connection health check\n  private async performHealthCheck() {\n    try {\n      console.log('🏥 Performing health check...')\n      \n      // Test basic Supabase connection\n      const { data, error } = await supabaseAdmin\n        .from('admin_users')\n        .select('id')\n        .limit(1)\n\n      if (error) {\n        throw new Error(`Health check failed: ${error.message}`)\n      }\n\n      // Check auth session validity\n      const authStore = useAuthStore()\n      if (authStore.isAuthenticated && !authStore.hasValidSession) {\n        throw new Error('Session expired')\n      }\n\n      this.isConnected.value = true\n      this.lastHealthCheck.value = new Date()\n      this.reconnectAttempts = 0\n      \n      console.log('✅ Health check passed')\n    } catch (error) {\n      console.error('❌ Health check failed:', error)\n      this.isConnected.value = false\n      await this.handleConnectionFailure()\n    }\n  }\n\n  // Handle tab becoming visible\n  private async handleTabVisible() {\n    const timeSinceLastActivity = Date.now() - this.lastActivity\n    \n    // If tab was hidden for more than 5 minutes, force reconnection\n    if (timeSinceLastActivity > 5 * 60 * 1000) {\n      console.log('⏰ Tab was hidden for extended period, forcing reconnection...')\n      await this.forceReconnection()\n    } else {\n      // Quick health check\n      await this.performHealthCheck()\n    }\n  }\n\n  // Handle tab becoming hidden\n  private handleTabHidden() {\n    this.lastActivity = Date.now()\n  }\n\n  // Handle window focus\n  private async handleWindowFocus() {\n    // Force a health check and potential reconnection\n    await this.performHealthCheck()\n    \n    // Refresh auth session\n    try {\n      const authStore = useAuthStore()\n      if (authStore.isAuthenticated) {\n        const { data: { session }, error } = await supabase.auth.getSession()\n        if (error || !session) {\n          console.log('🔄 Session invalid, reinitializing auth...')\n          await authStore.initialize()\n        }\n      }\n    } catch (error) {\n      console.error('Error refreshing session on focus:', error)\n    }\n  }\n\n  // Handle connection failure\n  private async handleConnectionFailure() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('🚨 Max reconnection attempts reached')\n      return\n    }\n\n    this.isReconnecting.value = true\n    this.reconnectAttempts++\n\n    console.log(`🔄 Attempting reconnection (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`)\n\n    try {\n      await this.forceReconnection()\n    } catch (error) {\n      console.error('Reconnection failed:', error)\n    } finally {\n      this.isReconnecting.value = false\n    }\n  }\n\n  // Force reconnection\n  private async forceReconnection() {\n    console.log('🔄 Forcing reconnection...')\n    \n    try {\n      // Refresh auth session\n      const authStore = useAuthStore()\n      if (authStore.isAuthenticated) {\n        await authStore.initialize()\n      }\n\n      // Test connection\n      await this.performHealthCheck()\n      \n      // Trigger reactivity update\n      await nextTick()\n      \n      console.log('✅ Reconnection successful')\n    } catch (error) {\n      console.error('❌ Reconnection failed:', error)\n      throw error\n    }\n  }\n\n  // Cleanup event listeners and intervals\n  private cleanup() {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval)\n      this.healthCheckInterval = null\n    }\n\n    if (this.visibilityChangeHandler) {\n      document.removeEventListener('visibilitychange', this.visibilityChangeHandler)\n      this.visibilityChangeHandler = null\n    }\n\n    if (this.focusHandler) {\n      window.removeEventListener('focus', this.focusHandler)\n      this.focusHandler = null\n    }\n\n    if (this.blurHandler) {\n      window.removeEventListener('blur', this.blurHandler)\n      this.blurHandler = null\n    }\n  }\n\n  // Manual reconnection trigger\n  async reconnect() {\n    console.log('🔄 Manual reconnection triggered...')\n    this.reconnectAttempts = 0\n    await this.forceReconnection()\n  }\n\n  // Get connection status\n  getStatus() {\n    return {\n      isConnected: this.isConnected.value,\n      isReconnecting: this.isReconnecting.value,\n      lastHealthCheck: this.lastHealthCheck.value,\n      reconnectAttempts: this.reconnectAttempts\n    }\n  }\n}\n\n// Export singleton instance\nexport const connectionMonitor = ConnectionMonitor.getInstance()\n","import { supabase, supabaseAdmin } from '@/config/supabase'\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns'\n\nexport interface DashboardMetrics {\n  totalUsers: number\n  totalPets: number\n  totalOrders: number\n  totalRevenue: number\n  usersTrend: number\n  petsTrend: number\n  ordersTrend: number\n  revenueTrend: number\n}\n\nexport interface ChartData {\n  labels: string[]\n  datasets: {\n    label: string\n    data: number[]\n    borderColor?: string\n    backgroundColor?: string\n  }[]\n}\n\nexport interface Activity {\n  id: string\n  title: string\n  description: string\n  type: 'success' | 'warning' | 'error' | 'info' | 'default'\n  timestamp: Date\n  user?: {\n    name: string\n    avatar?: string\n  }\n  category?: string\n}\n\nexport class DashboardService {\n  static async getDashboardMetrics(): Promise<DashboardMetrics> {\n    try {\n      // Get current period metrics\n      const [usersResult, petsResult, ordersResult, revenueResult] = await Promise.all([\n        supabaseAdmin.from('profiles').select('id', { count: 'exact', head: true }),\n        supabaseAdmin.from('pets').select('id', { count: 'exact', head: true }),\n        supabaseAdmin.from('orders').select('id', { count: 'exact', head: true }),\n        supabaseAdmin.from('orders').select('total_amount')\n      ])\n\n      // Get previous period for trend calculation (30 days ago)\n      const thirtyDaysAgo = format(subDays(new Date(), 30), 'yyyy-MM-dd')\n      \n      const [prevUsersResult, prevPetsResult, prevOrdersResult, prevRevenueResult] = await Promise.all([\n        supabaseAdmin\n          .from('profiles')\n          .select('id', { count: 'exact', head: true })\n          .lt('created_at', thirtyDaysAgo),\n        supabaseAdmin\n          .from('pets')\n          .select('id', { count: 'exact', head: true })\n          .lt('created_at', thirtyDaysAgo),\n        supabaseAdmin\n          .from('orders')\n          .select('id', { count: 'exact', head: true })\n          .lt('created_at', thirtyDaysAgo),\n        supabaseAdmin\n          .from('orders')\n          .select('total_amount')\n          .lt('created_at', thirtyDaysAgo)\n      ])\n\n      // Calculate current metrics\n      const totalUsers = usersResult.count || 0\n      const totalPets = petsResult.count || 0\n      const totalOrders = ordersResult.count || 0\n      const totalRevenue = revenueResult.data?.reduce((sum, order) => sum + (order.total_amount || 0), 0) || 0\n\n      // Calculate previous metrics\n      const prevUsers = prevUsersResult.count || 0\n      const prevPets = prevPetsResult.count || 0\n      const prevOrders = prevOrdersResult.count || 0\n      const prevRevenue = prevRevenueResult.data?.reduce((sum, order) => sum + (order.total_amount || 0), 0) || 0\n\n      // Calculate trends\n      const usersTrend = prevUsers > 0 ? ((totalUsers - prevUsers) / prevUsers) * 100 : 0\n      const petsTrend = prevPets > 0 ? ((totalPets - prevPets) / prevPets) * 100 : 0\n      const ordersTrend = prevOrders > 0 ? ((totalOrders - prevOrders) / prevOrders) * 100 : 0\n      const revenueTrend = prevRevenue > 0 ? ((totalRevenue - prevRevenue) / prevRevenue) * 100 : 0\n\n      return {\n        totalUsers,\n        totalPets,\n        totalOrders,\n        totalRevenue,\n        usersTrend: Math.round(usersTrend * 10) / 10,\n        petsTrend: Math.round(petsTrend * 10) / 10,\n        ordersTrend: Math.round(ordersTrend * 10) / 10,\n        revenueTrend: Math.round(revenueTrend * 10) / 10\n      }\n    } catch (error) {\n      console.error('Error fetching dashboard metrics:', error)\n      // Return fallback data\n      return {\n        totalUsers: 0,\n        totalPets: 0,\n        totalOrders: 0,\n        totalRevenue: 0,\n        usersTrend: 0,\n        petsTrend: 0,\n        ordersTrend: 0,\n        revenueTrend: 0\n      }\n    }\n  }\n\n  static async getPerformanceChartData(days = 7): Promise<ChartData> {\n    try {\n      const labels: string[] = []\n      const data: number[] = []\n\n      // Generate labels for the last N days\n      for (let i = days - 1; i >= 0; i--) {\n        const date = subDays(new Date(), i)\n        labels.push(format(date, 'MMM dd'))\n      }\n\n      // Get order data for each day\n      for (let i = days - 1; i >= 0; i--) {\n        const date = subDays(new Date(), i)\n        const startDate = startOfDay(date)\n        const endDate = endOfDay(date)\n\n        const { data: orders } = await supabaseAdmin\n          .from('orders')\n          .select('total_amount')\n          .gte('created_at', startDate.toISOString())\n          .lte('created_at', endDate.toISOString())\n\n        const dayRevenue = orders?.reduce((sum, order) => sum + (order.total_amount || 0), 0) || 0\n        data.push(dayRevenue / 1000) // Convert to thousands for better chart display\n      }\n\n      return {\n        labels,\n        datasets: [\n          {\n            label: 'Revenue',\n            data,\n            borderColor: '#6366F1',\n            backgroundColor: 'rgba(99, 102, 241, 0.1)'\n          }\n        ]\n      }\n    } catch (error) {\n      console.error('Error fetching performance chart data:', error)\n      // Return fallback data\n      const labels = Array.from({ length: days }, (_, i) => \n        format(subDays(new Date(), days - 1 - i), 'MMM dd')\n      )\n      return {\n        labels,\n        datasets: [\n          {\n            label: 'Revenue',\n            data: Array.from({ length: days }, () => Math.random() * 10),\n            borderColor: '#6366F1',\n            backgroundColor: 'rgba(99, 102, 241, 0.1)'\n          }\n        ]\n      }\n    }\n  }\n\n  static async getRecentActivities(limit = 10): Promise<Activity[]> {\n    try {\n      // Get recent orders as activities\n      const { data: orders } = await supabaseAdmin\n        .from('orders')\n        .select(`\n          id,\n          total_amount,\n          status,\n          created_at,\n          profiles:user_id (\n            first_name,\n            last_name,\n            username,\n            profile_pic\n          )\n        `)\n        .order('created_at', { ascending: false })\n        .limit(limit)\n\n      const activities: Activity[] = orders?.map(order => ({\n        id: order.id,\n        title: `${order.profiles?.first_name || order.profiles?.username || 'User'} placed an order`,\n        description: `Order #${order.id.slice(-8)} - $${order.total_amount}`,\n        type: order.status === 'completed' ? 'success' : 'info',\n        timestamp: new Date(order.created_at),\n        user: {\n          name: `${order.profiles?.first_name || ''} ${order.profiles?.last_name || ''}`.trim() || order.profiles?.username || 'User',\n          avatar: order.profiles?.profile_pic || undefined\n        },\n        category: 'Order'\n      })) || []\n\n      return activities\n    } catch (error) {\n      console.error('Error fetching recent activities:', error)\n      return []\n    }\n  }\n\n  static async searchGlobal(query: string, limit = 10) {\n    try {\n      const searchTerm = `%${query}%`\n      \n      const [usersResult, petsResult, ordersResult] = await Promise.all([\n        supabaseAdmin\n          .from('profiles')\n          .select('id, username, first_name, last_name, email')\n          .or(`username.ilike.${searchTerm},first_name.ilike.${searchTerm},last_name.ilike.${searchTerm},email.ilike.${searchTerm}`)\n          .limit(limit),\n        supabaseAdmin\n          .from('pets')\n          .select('id, name, breed, profiles:owner_id(username, first_name, last_name)')\n          .ilike('name', searchTerm)\n          .limit(limit),\n        supabaseAdmin\n          .from('orders')\n          .select('id, total_amount, status, profiles:user_id(username, first_name, last_name)')\n          .ilike('id', searchTerm)\n          .limit(limit)\n      ])\n\n      const results = [\n        ...(usersResult.data?.map(user => ({\n          id: user.id,\n          title: `${user.first_name || ''} ${user.last_name || ''}`.trim() || user.username || 'User',\n          subtitle: user.email,\n          type: 'user',\n          icon: 'mdi-account'\n        })) || []),\n        ...(petsResult.data?.map(pet => ({\n          id: pet.id,\n          title: pet.name,\n          subtitle: `${pet.breed} - Owner: ${pet.profiles?.first_name || pet.profiles?.username || 'Unknown'}`,\n          type: 'pet',\n          icon: 'mdi-paw'\n        })) || []),\n        ...(ordersResult.data?.map(order => ({\n          id: order.id,\n          title: `Order #${order.id.slice(-8)}`,\n          subtitle: `$${order.total_amount} - ${order.status}`,\n          type: 'order',\n          icon: 'mdi-shopping'\n        })) || [])\n      ]\n\n      return results\n    } catch (error) {\n      console.error('Error performing global search:', error)\n      return []\n    }\n  }\n}\n","import { supabase, supabaseAdmin } from '@/config/supabase'\nimport type { Database } from '@/config/supabase'\n\n// Enhanced error handling and retry logic\nclass ApiError extends Error {\n  constructor(message: string, public code?: string, public details?: any) {\n    super(message)\n    this.name = 'ApiError'\n  }\n}\n\n// Retry configuration\nconst RETRY_CONFIG = {\n  maxAttempts: 3,\n  baseDelay: 1000,\n  maxDelay: 5000\n}\n\n// Enhanced API wrapper with retry logic\nasync function withRetry<T>(\n  operation: () => Promise<T>,\n  context: string,\n  maxAttempts = RETRY_CONFIG.maxAttempts\n): Promise<T> {\n  let lastError: Error | null = null\n\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await operation()\n    } catch (error: any) {\n      lastError = error\n      console.warn(`${context} attempt ${attempt}/${maxAttempts} failed:`, error.message)\n\n      // Don't retry on certain errors\n      if (error.code === 'PGRST301' || error.code === 'PGRST116' || attempt === maxAttempts) {\n        break\n      }\n\n      // Calculate delay with exponential backoff\n      const delay = Math.min(\n        RETRY_CONFIG.baseDelay * Math.pow(2, attempt - 1),\n        RETRY_CONFIG.maxDelay\n      )\n\n      console.log(`Retrying ${context} in ${delay}ms...`)\n      await new Promise(resolve => setTimeout(resolve, delay))\n    }\n  }\n\n  throw new ApiError(\n    `${context} failed after ${maxAttempts} attempts: ${lastError?.message}`,\n    lastError?.code,\n    lastError\n  )\n}\n\n// Type aliases for better readability\ntype Tables = Database['public']['Tables']\ntype Profile = Tables['profiles']['Row']\ntype Pet = Tables['pets']['Row']\ntype Appointment = Tables['appointments']['Row']\ntype DaySlot = Tables['day_slots']['Row']\ntype Product = Tables['products']['Row']\ntype Order = Tables['orders']['Row']\ntype Message = Tables['messages']['Row']\ntype Notification = Tables['notifications']['Row']\n\nexport class ApiService {\n  // Dashboard Analytics\n  static async getDashboardMetrics() {\n    return withRetry(async () => {\n      const { data, error } = await supabase.rpc('calculate_dashboard_metrics')\n      if (error) throw error\n      return { data, error: null }\n    }, 'Dashboard metrics fetch').catch(error => {\n      console.error('Error fetching dashboard metrics:', error)\n      return { data: null, error }\n    })\n  }\n\n  // User Management\n  static async getUsers(page = 1, limit = 10, search = '') {\n    try {\n      // Get admin user emails to exclude them from the results\n      const { data: adminUsers, error: adminError } = await supabaseAdmin\n        .from('admin_users')\n        .select('email')\n        .eq('is_active', true)\n\n      const adminEmails = adminUsers?.map(admin => admin.email) || []\n\n      // First get the total count for pagination (excluding admin users and inactive users)\n      let countQuery = supabaseAdmin\n        .from('profiles')\n        .select('*', { count: 'exact', head: true })\n        .eq('is_active', true)\n\n      if (search) {\n        countQuery = countQuery.or(`username.ilike.%${search}%,first_name.ilike.%${search}%,last_name.ilike.%${search}%`)\n      }\n\n      const { count } = await countQuery\n\n      // Then get the actual data with joins\n      const { data: profilesData, error: profilesError } = await supabaseAdmin\n        .rpc('get_users_with_email_and_stats', {\n          page_number: page,\n          page_size: limit,\n          search_term: search || ''\n        })\n\n      if (profilesError) {\n        // Fallback to direct query if RPC doesn't exist\n        let query = supabaseAdmin\n          .from('profiles')\n          .select(`\n            *,\n            pets:pets(count),\n            orders:orders(count),\n            appointments:appointments(count)\n          `)\n          .eq('is_active', true)\n          .order('created_at', { ascending: false })\n\n        if (search) {\n          query = query.or(`username.ilike.%${search}%,first_name.ilike.%${search}%,last_name.ilike.%${search}%`)\n        }\n\n        const { data, error } = await query\n          .range((page - 1) * limit, page * limit - 1)\n\n        if (error) throw error\n\n        // Get email data separately\n        const { data: authUsers, error: authError } = await supabaseAdmin.auth.admin.listUsers()\n\n        if (!authError && authUsers) {\n          const emailMap = new Map(authUsers.users.map(user => [user.id, {\n            email: user.email\n          }]))\n\n          const enrichedData = data?.map(user => ({\n            ...user,\n            email: emailMap.get(user.id)?.email || ''\n          }))\n          .filter(user => !adminEmails.includes(user.email)) // Filter out admin users\n\n          // Recalculate count after filtering\n          const filteredCount = enrichedData?.length || 0\n          const totalFilteredCount = count ? Math.max(0, count - adminEmails.length) : 0\n\n          return { data: enrichedData, error: null, count: totalFilteredCount }\n        }\n\n        // Filter out admin users from data\n        const filteredData = data?.filter(user => {\n          // Since we don't have email in profiles, we need to check against auth users\n          return true // Will be filtered in the email enrichment step above\n        })\n\n        return { data: filteredData, error: null, count: count || 0 }\n      }\n\n      // Filter out admin users from RPC results\n      const filteredProfilesData = profilesData?.filter(user =>\n        !adminEmails.includes(user.email)\n      )\n\n      // Recalculate count after filtering\n      const totalFilteredCount = count ? Math.max(0, count - adminEmails.length) : 0\n\n      return { data: filteredProfilesData, error: null, count: totalFilteredCount }\n    } catch (error) {\n      console.error('Error fetching users:', error)\n      return { data: null, error, count: 0 }\n    }\n  }\n\n  static async getUserById(id: string) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('profiles')\n        .select(`\n          *,\n          pets:pets(*),\n          orders:orders(*),\n          appointments:appointments(*)\n        `)\n        .eq('id', id)\n        .single()\n\n      if (error) throw error\n\n      // Get email data from auth.users\n      const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.getUserById(id)\n\n      if (!authError && authUser) {\n        return {\n          data: {\n            ...data,\n            email: authUser.user.email || ''\n          },\n          error: null\n        }\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error fetching user:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async updateUser(id: string, updates: Partial<Profile>) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('profiles')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error updating user:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async createUser(userData: {\n    email: string\n    password: string\n    first_name: string\n    last_name: string\n    username: string\n    mobile_number?: string\n    bio?: string\n  }) {\n    try {\n      // Create auth user first\n      const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\n        email: userData.email,\n        password: userData.password,\n        email_confirm: true\n      })\n\n      if (authError) throw authError\n\n      // Create profile\n      const { data: profileData, error: profileError } = await supabaseAdmin\n        .from('profiles')\n        .insert({\n          id: authData.user.id,\n          first_name: userData.first_name,\n          last_name: userData.last_name,\n          username: userData.username,\n          mobile_number: userData.mobile_number || null,\n          bio: userData.bio || null,\n          profile_visibility: true\n        })\n        .select()\n        .single()\n\n      if (profileError) {\n        // Cleanup auth user if profile creation fails\n        await supabaseAdmin.auth.admin.deleteUser(authData.user.id)\n        throw profileError\n      }\n\n      return {\n        data: {\n          ...profileData,\n          email: userData.email\n        },\n        error: null\n      }\n    } catch (error) {\n      console.error('Error creating user:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async deleteUser(id: string) {\n    try {\n      // Soft delete: mark user as inactive instead of hard delete\n      const { error: profileError } = await supabaseAdmin\n        .from('profiles')\n        .update({\n          is_active: false,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n\n      if (profileError) throw profileError\n\n      // Optionally disable the auth user (soft delete in auth system)\n      const { error: authError } = await supabaseAdmin.auth.admin.updateUserById(id, {\n        ban_duration: 'none', // This effectively disables the user\n        user_metadata: {\n          ...{}, // preserve existing metadata\n          is_deleted: true,\n          deleted_at: new Date().toISOString()\n        }\n      })\n\n      if (authError) {\n        console.warn('Failed to disable auth user, but profile was marked inactive:', authError)\n      }\n\n      return { error: null }\n    } catch (error) {\n      console.error('Error deleting user:', error)\n      return { error }\n    }\n  }\n\n  static async resetUserPassword(userId: string, newPassword: string) {\n    try {\n      const { data, error } = await supabaseAdmin.auth.admin.updateUserById(userId, {\n        password: newPassword\n      })\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error resetting user password:', error)\n      return { data: null, error }\n    }\n  }\n\n  // Pet Management\n  static async getPets(page = 1, limit = 10, search = '', type = '') {\n    try {\n      // First get the total count for pagination (including all pets for admin dashboard)\n      // Use supabaseAdmin to bypass RLS and see all pets in admin dashboard\n      let countQuery = supabaseAdmin\n        .from('pets')\n        .select('*', { count: 'exact', head: true })\n\n      if (search) {\n        countQuery = countQuery.or(`name.ilike.%${search}%,type.ilike.%${search}%`)\n      }\n      \n      if (type) {\n        countQuery = countQuery.eq('type', type) // Apply type filter to count query\n      }\n\n      const { count } = await countQuery\n\n      // Then get the actual data\n      let query = supabaseAdmin\n        .from('pets')\n        .select(`\n          *,\n          owner:profiles(id, username, first_name, last_name)\n        `)\n        .order('created_at', { ascending: false })\n\n      if (search) {\n        query = query.or(`name.ilike.%${search}%,type.ilike.%${search}%`)\n      }\n      \n      if (type) {\n        query = query.eq('type', type) // Apply type filter to data query\n      }\n\n      const { data, error } = await query\n        .range((page - 1) * limit, page * limit - 1)\n\n      if (error) throw error\n      return { data, error: null, count }\n    } catch (error) {\n      console.error('Error fetching pets:', error)\n      return { data: null, error, count: 0 }\n    }\n  }\n\n  static async getPetById(id: string) {\n    try {\n      // Use supabaseAdmin to bypass RLS and see all pets in admin dashboard\n      const { data, error } = await supabaseAdmin\n        .from('pets')\n        .select(`\n          *,\n          owner:profiles(id, username, first_name, last_name, mobile_number)\n        `)\n        .eq('id', id)\n        .eq('is_active', true)\n        .single()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error fetching pet:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async createPet(pet: { name: string; type?: string; gender?: string; user_id: string }) {\n    try {\n      // Validate required fields\n      if (!pet.name || !pet.user_id) {\n        throw new Error('Pet name and user_id are required')\n      }\n\n      const insertData = {\n        name: pet.name,\n        type: pet.type || null,\n        gender: pet.gender || null,\n        user_id: pet.user_id,\n        is_active: true,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }\n\n      // Use regular supabase client with user authentication for RLS policies\n      const { data, error } = await supabase\n        .from('pets')\n        .insert(insertData)\n        .select(`\n          *,\n          owner:profiles(id, username, first_name, last_name)\n        `)\n        .single()\n\n      if (error) throw error\n\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error creating pet:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async updatePet(id: string, updates: { name?: string; type?: string; gender?: string }) {\n    try {\n      // Use regular supabase client with user authentication for RLS policies\n      const { data, error } = await supabase\n        .from('pets')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n        .select(`\n          *,\n          owner:profiles(id, username, first_name, last_name)\n        `)\n        .single()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error updating pet:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async deletePet(id: string) {\n    try {\n      // Soft delete: mark pet as inactive instead of hard delete\n      // Use regular supabase client with user authentication for RLS policies\n      const { error: petError } = await supabase\n        .from('pets')\n        .update({\n          is_active: false,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n\n      if (petError) throw petError\n\n      return { error: null }\n    } catch (error) {\n      console.error('Error deleting pet:', error)\n      return { error }\n    }\n  }\n\n  // Appointment Management\n  static async getAppointments(page = 1, limit = 10, status = '', date = '', search = '') {\n    try {\n      console.log('API: Fetching appointments with params:', { page, limit, status, date, search })\n\n      let query = supabaseAdmin\n        .from('appointments')\n        .select(`\n          *,\n          pets!inner(name, type),\n          profiles!inner(username, first_name, last_name)\n        `, { count: 'exact' })\n        .order('appointment_date', { ascending: false })\n        .order('appointment_time', { ascending: true })\n\n      if (status) {\n        query = query.eq('status', status)\n      }\n\n      if (date) {\n        query = query.eq('appointment_date', date)\n      }\n\n      if (search) {\n        // Search in status for now - can be enhanced later\n        query = query.ilike('status', `%${search}%`)\n      }\n\n      const { data, error, count } = await query\n        .range((page - 1) * limit, page * limit - 1)\n\n      console.log('API: Raw appointment data:', { data, error, count })\n\n      if (error) {\n        console.error('API: Supabase error:', error)\n        throw error\n      }\n\n      // Transform the data to match our interface\n      const transformedData = data?.map(appointment => ({\n        ...appointment,\n        pet: appointment.pets,\n        user: appointment.profiles\n      })) || []\n\n      console.log('API: Transformed appointment data:', transformedData)\n\n      return { data: transformedData, error: null, count }\n    } catch (error) {\n      console.error('Error fetching appointments:', error)\n      return { data: null, error, count: 0 }\n    }\n  }\n\n  static async createAppointment(appointmentData: {\n    pet_id: string\n    user_id: string\n    appointment_date: string\n    appointment_time: string\n    day_slot_id: string\n    status: string\n  }) {\n    try {\n      console.log('API: Creating appointment with data:', appointmentData)\n\n      const { data, error } = await supabaseAdmin\n        .from('appointments')\n        .insert({\n          pet_id: appointmentData.pet_id,\n          user_id: appointmentData.user_id,\n          appointment_date: appointmentData.appointment_date,\n          appointment_time: appointmentData.appointment_time,\n          day_slot_id: appointmentData.day_slot_id,\n          status: appointmentData.status,\n          created_at: new Date().toISOString()\n        })\n        .select()\n        .single()\n\n      console.log('API: Create appointment result:', { data, error })\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error creating appointment:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async updateAppointmentStatus(id: string, status: string) {\n    try {\n      console.log('API: Updating appointment status:', { id, status })\n\n      const { data, error } = await supabaseAdmin\n        .from('appointments')\n        .update({ status, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n\n      console.log('API: Update appointment result:', { data, error })\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error updating appointment:', error)\n      return { data: null, error }\n    }\n  }\n\n  // Day Slots Management\n  static async getDaySlots(dayOfWeek?: string) {\n    try {\n      let query = supabaseAdmin\n        .from('day_slots')\n        .select('*')\n        .eq('is_active', true)\n        .order('time_slot', { ascending: true })\n\n      if (dayOfWeek) {\n        query = query.eq('day_of_week', dayOfWeek)\n      }\n\n      const { data, error } = await query\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error fetching day slots:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async getAvailableTimeSlots(appointmentDate: string) {\n    try {\n      // Get day of week from the date\n      const date = new Date(appointmentDate)\n      const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' })\n\n      // Get all active slots for this day\n      const slotsResult = await this.getDaySlots(dayOfWeek)\n      if (slotsResult.error || !slotsResult.data) {\n        throw slotsResult.error || new Error('No slots found')\n      }\n\n      // Get existing appointments for this date (excluding cancelled appointments)\n      const { data: appointments, error: appointmentsError } = await supabaseAdmin\n        .from('appointments')\n        .select('day_slot_id')\n        .eq('appointment_date', appointmentDate)\n        .not('status', 'eq', 'Cancelled')\n\n      if (appointmentsError) throw appointmentsError\n\n      // Count appointments per slot\n      const slotCounts = appointments?.reduce((acc: Record<string, number>, apt) => {\n        if (apt.day_slot_id) {\n          acc[apt.day_slot_id] = (acc[apt.day_slot_id] || 0) + 1\n        }\n        return acc\n      }, {}) || {}\n\n      // Filter available slots\n      const availableSlots = slotsResult.data.filter(slot => {\n        const currentCount = slotCounts[slot.id] || 0\n        return currentCount < slot.max_capacity\n      })\n\n      return { data: availableSlots, error: null }\n    } catch (error) {\n      console.error('Error fetching available time slots:', error)\n      return { data: null, error }\n    }\n  }\n\n  // Product Management\n  static async getProducts(page = 1, limit = 10, search = '') {\n    try {\n      let baseQuery = supabaseAdmin\n        .from('products')\n\n      // Apply search filter to base query if provided\n      if (search) {\n        baseQuery = baseQuery.or(`title.ilike.%${search}%,description.ilike.%${search}%`)\n      }\n\n      // Get total count with same filters\n      const { count: totalCount } = await baseQuery\n        .select('*', { count: 'exact', head: true })\n\n      // Get paginated data with same filters\n      const { data, error } = await baseQuery\n        .select(`\n          *,\n          images:product_images(*)\n        `)\n        .order('created_at', { ascending: false })\n        .range((page - 1) * limit, page * limit - 1)\n\n      if (error) throw error\n      return { data, error: null, count: totalCount }\n    } catch (error) {\n      console.error('Error fetching products:', error)\n      return { data: null, error, count: 0 }\n    }\n  }\n\n  static async createProduct(product: Omit<Product, 'id' | 'created_at'>) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('products')\n        .insert(product)\n        .select()\n        .single()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error creating product:', error)\n      return { data: null, error }\n    }\n  }\n\n  // Image upload methods\n  static async uploadProductImage(productId: string, file: File, fileName: string) {\n    try {\n      const filePath = `${productId}/${fileName}`\n\n      const { data, error } = await supabaseAdmin.storage\n        .from('product-images')\n        .upload(filePath, file, {\n          upsert: true\n        })\n\n      if (error) throw error\n\n      // Get public URL\n      const { data: urlData } = supabaseAdmin.storage\n        .from('product-images')\n        .getPublicUrl(filePath)\n\n      return { data: { ...data, publicUrl: urlData.publicUrl }, error: null }\n    } catch (error) {\n      console.error('Error uploading product image:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async saveProductImageRecord(productId: string, imageUrl: string, isThumbnail: boolean = false) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('product_images')\n        .insert({\n          product_id: productId,\n          image_url: imageUrl,\n          is_thumbnail: isThumbnail\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error saving product image record:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async deleteProductImage(imageId: string, imagePath: string) {\n    try {\n      // Delete from storage\n      const { error: storageError } = await supabaseAdmin.storage\n        .from('product-images')\n        .remove([imagePath])\n\n      if (storageError) throw storageError\n\n      // Delete from database\n      const { error: dbError } = await supabaseAdmin\n        .from('product_images')\n        .delete()\n        .eq('id', imageId)\n\n      if (dbError) throw dbError\n      return { error: null }\n    } catch (error) {\n      console.error('Error deleting product image:', error)\n      return { error }\n    }\n  }\n\n  static async createProductWithImages(productData: any, thumbnail: File | null, productImages: File[]) {\n    try {\n      // First create the product\n      const productResult = await this.createProduct(productData)\n      if (productResult.error) throw productResult.error\n\n      const productId = productResult.data.id\n      const imagePromises = []\n\n      // Upload thumbnail if provided\n      if (thumbnail) {\n        const extension = thumbnail.name.split('.').pop()\n        const thumbnailFileName = `thumbnail.${extension}`\n\n        const uploadResult = await this.uploadProductImage(productId, thumbnail, thumbnailFileName)\n        if (uploadResult.error) throw uploadResult.error\n\n        imagePromises.push(\n          this.saveProductImageRecord(productId, uploadResult.data.publicUrl, true)\n        )\n      }\n\n      // Upload additional images\n      for (let i = 0; i < productImages.length; i++) {\n        const file = productImages[i]\n        const extension = file.name.split('.').pop()\n        const fileName = `product-${i + 1}.${extension}`\n\n        const uploadResult = await this.uploadProductImage(productId, file, fileName)\n        if (uploadResult.error) throw uploadResult.error\n\n        imagePromises.push(\n          this.saveProductImageRecord(productId, uploadResult.data.publicUrl, false)\n        )\n      }\n\n      // Wait for all image records to be saved\n      await Promise.all(imagePromises)\n\n      return { data: productResult.data, error: null }\n    } catch (error) {\n      console.error('Error creating product with images:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async updateProductWithImages(productId: string, productData: any, thumbnail: File | null, productImages: File[], existingImages: any[]) {\n    try {\n      // Update the product\n      const productResult = await this.updateProduct(productId, productData)\n      if (productResult.error) throw productResult.error\n\n      const imagePromises = []\n\n      // Upload new thumbnail if provided\n      if (thumbnail) {\n        // Delete existing thumbnail\n        const existingThumbnail = existingImages.find(img => img.is_thumbnail)\n        if (existingThumbnail) {\n          const imagePath = existingThumbnail.image_url.split('/').slice(-2).join('/')\n          await this.deleteProductImage(existingThumbnail.id, imagePath)\n        }\n\n        const extension = thumbnail.name.split('.').pop()\n        const thumbnailFileName = `thumbnail.${extension}`\n\n        const uploadResult = await this.uploadProductImage(productId, thumbnail, thumbnailFileName)\n        if (uploadResult.error) throw uploadResult.error\n\n        imagePromises.push(\n          this.saveProductImageRecord(productId, uploadResult.data.publicUrl, true)\n        )\n      }\n\n      // Upload new additional images\n      for (let i = 0; i < productImages.length; i++) {\n        const file = productImages[i]\n        const extension = file.name.split('.').pop()\n        const fileName = `product-${Date.now()}-${i + 1}.${extension}`\n\n        const uploadResult = await this.uploadProductImage(productId, file, fileName)\n        if (uploadResult.error) throw uploadResult.error\n\n        imagePromises.push(\n          this.saveProductImageRecord(productId, uploadResult.data.publicUrl, false)\n        )\n      }\n\n      // Wait for all image operations to complete\n      await Promise.all(imagePromises)\n\n      return { data: productResult.data, error: null }\n    } catch (error) {\n      console.error('Error updating product with images:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async updateProduct(id: string, updates: Partial<Product>) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('products')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error updating product:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async deleteProduct(id: string) {\n    try {\n      const { error } = await supabaseAdmin\n        .from('products')\n        .delete()\n        .eq('id', id)\n\n      if (error) throw error\n      return { error: null }\n    } catch (error) {\n      console.error('Error deleting product:', error)\n      return { error }\n    }\n  }\n\n  // Order Management\n  static async getOrders(page = 1, limit = 10, status = '') {\n    try {\n      let query = supabaseAdmin\n        .from('orders')\n        .select(`\n          *,\n          user:profiles(username, first_name, last_name),\n          items:order_items(\n            *,\n            product:products(title, price)\n          )\n        `)\n        .order('created_at', { ascending: false })\n\n      if (status) {\n        query = query.eq('status', status)\n      }\n\n      const { data, error, count } = await query\n        .range((page - 1) * limit, page * limit - 1)\n\n      if (error) throw error\n      return { data, error: null, count }\n    } catch (error) {\n      console.error('Error fetching orders:', error)\n      return { data: null, error, count: 0 }\n    }\n  }\n\n  static async updateOrderStatus(id: string, status: string, notes = '') {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('orders')\n        .update({ status })\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (error) throw error\n\n      // Log status change\n      await supabaseAdmin\n        .from('order_status_history')\n        .insert({\n          order_id: id,\n          status,\n          notes,\n          changed_by: (await supabase.auth.getUser()).data.user?.id\n        })\n\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error updating order status:', error)\n      return { data: null, error }\n    }\n  }\n\n  // Message Management\n  static async getMessages(page = 1, limit = 10) {\n    try {\n      const { data, error, count } = await supabaseAdmin\n        .from('messages')\n        .select(`\n          *,\n          sender:sender_id(username, first_name, last_name),\n          receiver:receiver_id(username, first_name, last_name)\n        `)\n        .order('sent_at', { ascending: false })\n        .range((page - 1) * limit, page * limit - 1)\n\n      if (error) throw error\n      return { data, error: null, count }\n    } catch (error) {\n      console.error('Error fetching messages:', error)\n      return { data: null, error, count: 0 }\n    }\n  }\n\n  static async sendMessage(receiverId: string, message: string) {\n    try {\n      const { data: user } = await supabase.auth.getUser()\n      if (!user.user) throw new Error('Not authenticated')\n\n      const { data, error } = await supabaseAdmin\n        .from('messages')\n        .insert({\n          sender_id: user.user.id,\n          receiver_id: receiverId,\n          message\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error sending message:', error)\n      return { data: null, error }\n    }\n  }\n\n  // Notification Management\n  static async createNotification(notification: Omit<Notification, 'id' | 'created_at'>) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('notifications')\n        .insert(notification)\n        .select()\n        .single()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error creating notification:', error)\n      return { data: null, error }\n    }\n  }\n\n  static async broadcastNotification(title: string, message: string, type = 'info') {\n    try {\n      // Get all user IDs\n      const { data: users, error: usersError } = await supabaseAdmin\n        .from('profiles')\n        .select('id')\n\n      if (usersError) throw usersError\n\n      // Create notifications for all users\n      const notifications = users.map(user => ({\n        user_id: user.id,\n        title,\n        message,\n        type,\n        is_read: false\n      }))\n\n      const { data, error } = await supabaseAdmin\n        .from('notifications')\n        .insert(notifications)\n        .select()\n\n      if (error) throw error\n      return { data, error: null }\n    } catch (error) {\n      console.error('Error broadcasting notification:', error)\n      return { data: null, error }\n    }\n  }\n\n  // Analytics\n  static async getAnalytics(timeframe = '30d') {\n    try {\n      const days = parseInt(timeframe.replace('d', ''))\n      const startDate = new Date()\n      startDate.setDate(startDate.getDate() - days)\n\n      // Revenue analytics\n      const { data: revenueData, error: revenueError } = await supabaseAdmin\n        .from('orders')\n        .select('total_amount, created_at')\n        .gte('created_at', startDate.toISOString())\n        .not('status', 'eq', 'cancelled')\n\n      if (revenueError) throw revenueError\n\n      // User registration analytics\n      const { data: userGrowth, error: userError } = await supabaseAdmin\n        .from('profiles')\n        .select('created_at')\n        .gte('created_at', startDate.toISOString())\n\n      if (userError) throw userError\n\n      return {\n        data: {\n          revenue: revenueData,\n          userGrowth\n        },\n        error: null\n      }\n    } catch (error) {\n      console.error('Error fetching analytics:', error)\n      return { data: null, error }\n    }\n  }\n}\n"],"names":["supabaseUrl","supabaseAnonKey","supabaseServiceRoleKey","supabase","createClient","supabaseAdmin","_ConnectionMonitor","__publicField","ref","activityEvents","updateActivity","event","data","error","authStore","useAuthStore","session","nextTick","ConnectionMonitor","connectionMonitor","DashboardService","usersResult","petsResult","ordersResult","revenueResult","thirtyDaysAgo","format","subDays","prevUsersResult","prevPetsResult","prevOrdersResult","prevRevenueResult","totalUsers","totalPets","totalOrders","totalRevenue","_a","sum","order","prevUsers","prevPets","prevOrders","prevRevenue","_b","usersTrend","petsTrend","ordersTrend","revenueTrend","days","labels","i","date","startDate","startOfDay","endDate","endOfDay","orders","dayRevenue","_","limit","_c","_d","_e","_f","query","searchTerm","user","pet","ApiError","message","code","details","RETRY_CONFIG","withRetry","operation","context","maxAttempts","lastError","attempt","delay","resolve","ApiService","page","search","adminUsers","adminError","adminEmails","admin","countQuery","count","profilesData","profilesError","authUsers","authError","emailMap","enrichedData","filteredCount","totalFilteredCount","filteredProfilesData","id","authUser","updates","userData","authData","profileData","profileError","userId","newPassword","type","insertData","petError","status","transformedData","appointment","appointmentData","dayOfWeek","appointmentDate","slotsResult","appointments","appointmentsError","slotCounts","acc","apt","slot","baseQuery","totalCount","product","productId","file","fileName","filePath","urlData","imageUrl","isThumbnail","imageId","imagePath","storageError","dbError","productData","thumbnail","productImages","productResult","imagePromises","thumbnailFileName","uploadResult","extension","existingImages","existingThumbnail","img","notes","receiverId","notification","title","users","usersError","notifications","timeframe","revenueData","revenueError","userGrowth","userError"],"mappings":"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"}