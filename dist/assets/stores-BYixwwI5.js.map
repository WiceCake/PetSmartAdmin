{"version":3,"file":"stores-BYixwwI5.js","sources":["../../src/stores/auth.ts","../../src/stores/sidebar.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed, nextTick } from 'vue'\nimport { supabase, supabaseAdmin } from '@/config/supabase'\nimport type { User, Session } from '@supabase/supabase-js'\n\nexport const useAuthStore = defineStore('auth', () => {\n  const user = ref<User | null>(null)\n  const session = ref<Session | null>(null)\n  const loading = ref(false)\n  const adminUser = ref<any>(null)\n  const initialized = ref(false)\n  const redirectUrl = ref<string | null>(null)\n  const sessionExpired = ref(false)\n\n  // Store auth state change subscription for cleanup\n  let authStateSubscription: { data: { subscription: { unsubscribe: () => void } } } | null = null\n\n  const isAuthenticated = computed(() => !!user.value && !!session.value)\n  const isAdmin = computed(() => !!adminUser.value && adminUser.value.is_active)\n  const hasValidSession = computed(() => {\n    if (!session.value) return false\n    const now = Math.floor(Date.now() / 1000)\n    return session.value.expires_at ? session.value.expires_at > now : true\n  })\n\n  // Initialize auth state\n  const initialize = async () => {\n    if (initialized.value) {\n      return // Prevent multiple initializations\n    }\n\n    loading.value = true\n    sessionExpired.value = false\n\n    try {\n      // Get current session\n      const { data: { session: currentSession }, error } = await supabase.auth.getSession()\n\n      if (error) {\n        console.error('Session retrieval error:', error)\n        await handleSessionExpiration()\n        return\n      }\n\n      if (currentSession) {\n        // Set session first so hasValidSession can check it\n        session.value = currentSession\n        user.value = currentSession.user\n\n        // Validate session expiration\n        if (!hasValidSession.value) {\n          console.log('Session expired, clearing auth state')\n          await handleSessionExpiration()\n          return\n        }\n\n        // Check admin status\n        const isAdminUser = await checkAdminStatus()\n        if (!isAdminUser) {\n          console.log('User is not an admin, signing out')\n          await signOut()\n          return\n        }\n      }\n\n      // Clean up existing listener\n      if (authStateSubscription) {\n        authStateSubscription.data.subscription.unsubscribe()\n      }\n\n      // Listen for auth changes\n      authStateSubscription = supabase.auth.onAuthStateChange(async (event, newSession) => {\n        console.log('Auth state change:', event, newSession?.user?.email)\n\n        // Handle different auth events\n        if (event === 'SIGNED_OUT') {\n          session.value = null\n          user.value = null\n          adminUser.value = null\n          sessionExpired.value = false\n          console.log('User signed out, cleared auth state')\n          return\n        }\n\n        if (event === 'TOKEN_REFRESHED') {\n          console.log('Token refreshed, updating session')\n        }\n\n        // Update session and user for all other events\n        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n          session.value = newSession\n          user.value = newSession?.user || null\n\n          if (newSession?.user) {\n            const isAdminUser = await checkAdminStatus()\n            if (!isAdminUser) {\n              console.log('User does not have admin privileges, signing out')\n              await signOut()\n              return\n            }\n            console.log('Auth state updated successfully')\n          } else {\n            adminUser.value = null\n          }\n        }\n      })\n\n      initialized.value = true\n    } catch (error) {\n      console.error('Auth initialization error:', error)\n      await handleSessionExpiration()\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Handle session expiration\n  const handleSessionExpiration = async () => {\n    sessionExpired.value = true\n    session.value = null\n    user.value = null\n    adminUser.value = null\n\n    // Clear any stored session data\n    try {\n      await supabase.auth.signOut()\n    } catch (error) {\n      console.error('Error during session cleanup:', error)\n    }\n  }\n\n  // Set redirect URL for post-login navigation\n  const setRedirectUrl = (url: string) => {\n    redirectUrl.value = url\n    // Store in sessionStorage for persistence across page reloads\n    try {\n      sessionStorage.setItem('auth-redirect-url', url)\n    } catch (error) {\n      console.warn('Failed to store redirect URL:', error)\n    }\n  }\n\n  // Get and clear redirect URL\n  const getAndClearRedirectUrl = (): string => {\n    let url = redirectUrl.value || '/dashboard'\n\n    // Try to get from sessionStorage if not in memory\n    if (!redirectUrl.value) {\n      try {\n        const storedUrl = sessionStorage.getItem('auth-redirect-url')\n        if (storedUrl) {\n          url = storedUrl\n        }\n      } catch (error) {\n        console.warn('Failed to retrieve redirect URL:', error)\n      }\n    }\n\n    // Clear the redirect URL\n    redirectUrl.value = null\n    try {\n      sessionStorage.removeItem('auth-redirect-url')\n    } catch (error) {\n      console.warn('Failed to clear redirect URL:', error)\n    }\n\n    return url\n  }\n\n  // Check if user is admin\n  const checkAdminStatus = async () => {\n    if (!user.value) return false\n\n    try {\n      // Check admin_users table using email since that's how admins are identified\n      const { data, error } = await supabaseAdmin\n        .from('admin_users')\n        .select('*')\n        .eq('email', user.value.email)\n        .eq('is_active', true)\n        .single()\n\n      if (error && error.code !== 'PGRST116') {\n        throw error\n      }\n\n      adminUser.value = data\n      return !!data\n    } catch (error) {\n      console.error('Admin status check error:', error)\n      adminUser.value = null\n      return false\n    }\n  }\n\n  // Sign in\n  const signIn = async (email: string, password: string) => {\n    loading.value = true\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      })\n\n      if (error) throw error\n\n      if (data.user && data.session) {\n        // Manually set the auth state immediately for faster UI response\n        session.value = data.session\n        user.value = data.user\n        sessionExpired.value = false\n\n        // Wait a bit longer for auth state change to propagate\n        await new Promise(resolve => setTimeout(resolve, 300))\n\n        // Check admin status after auth state has been updated\n        const isAdminUser = await checkAdminStatus()\n        if (!isAdminUser) {\n          await signOut()\n          throw new Error('Access denied. Admin privileges required.')\n        }\n\n        // Double-check that all auth state is properly set\n        if (!isAuthenticated.value || !isAdmin.value) {\n          console.error('Auth state not properly set after login')\n          await signOut()\n          throw new Error('Authentication state error. Please try again.')\n        }\n\n        console.log('Successfully signed in!')\n        return { success: true }\n      } else {\n        throw new Error('No user data returned from authentication')\n      }\n    } catch (error: any) {\n      console.error('Sign in failed:', error.message)\n      return { success: false, error: error.message }\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Sign out\n  const signOut = async () => {\n    loading.value = true\n    try {\n      const { error } = await supabase.auth.signOut()\n      if (error) throw error\n      \n      user.value = null\n      session.value = null\n      adminUser.value = null\n      console.log('Successfully signed out!')\n    } catch (error: any) {\n      console.error('Sign out failed:', error.message)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Reset password\n  const resetPassword = async (email: string) => {\n    loading.value = true\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email)\n\n      if (error) throw error\n\n      console.log('Password reset email sent!')\n      return { success: true }\n    } catch (error: any) {\n      console.error('Password reset failed:', error.message)\n      return { success: false, error: error.message }\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Update password\n  const updatePassword = async (newPassword: string) => {\n    loading.value = true\n    try {\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      })\n\n      if (error) throw error\n\n      console.log('Password updated successfully!')\n      return { success: true }\n    } catch (error: any) {\n      console.error('Password update failed:', error.message)\n      return { success: false, error: error.message }\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Refresh session manually\n  const refreshSession = async () => {\n    try {\n      console.log('ðŸ”„ Manually refreshing session...')\n      const { data, error } = await supabase.auth.refreshSession()\n\n      if (error) {\n        console.error('Session refresh failed:', error)\n        await handleSessionExpiration()\n        return false\n      }\n\n      if (data.session) {\n        session.value = data.session\n        user.value = data.session.user\n        console.log('âœ… Session refreshed successfully')\n        return true\n      }\n\n      return false\n    } catch (error) {\n      console.error('Session refresh error:', error)\n      await handleSessionExpiration()\n      return false\n    }\n  }\n\n  // Recover from connection issues\n  const recoverConnection = async () => {\n    try {\n      console.log('ðŸ”„ Attempting connection recovery...')\n\n      // First try to get current session\n      const { data: { session: currentSession }, error } = await supabase.auth.getSession()\n\n      if (error) {\n        console.error('Session recovery failed:', error)\n        await handleSessionExpiration()\n        return false\n      }\n\n      if (currentSession) {\n        // Validate session\n        if (!hasValidSession.value) {\n          console.log('Session expired during recovery')\n          await handleSessionExpiration()\n          return false\n        }\n\n        // Update auth state\n        session.value = currentSession\n        user.value = currentSession.user\n\n        // Verify admin status\n        const isAdminUser = await checkAdminStatus()\n        if (!isAdminUser) {\n          console.log('Admin status lost during recovery')\n          await signOut()\n          return false\n        }\n\n        // Force reactivity update\n        await nextTick()\n\n        console.log('âœ… Connection recovered successfully')\n        return true\n      }\n\n      console.log('No session found during recovery')\n      await handleSessionExpiration()\n      return false\n    } catch (error) {\n      console.error('Connection recovery failed:', error)\n      await handleSessionExpiration()\n      return false\n    }\n  }\n\n  // Validate current session\n  const validateSession = async () => {\n    if (!session.value || !user.value) {\n      return false\n    }\n\n    try {\n      // Check if session is still valid\n      if (!hasValidSession.value) {\n        console.log('Session validation failed: expired')\n        await handleSessionExpiration()\n        return false\n      }\n\n      // Verify admin status\n      const isAdminUser = await checkAdminStatus()\n      if (!isAdminUser) {\n        console.log('Session validation failed: not admin')\n        await signOut()\n        return false\n      }\n\n      return true\n    } catch (error) {\n      console.error('Session validation error:', error)\n      await handleSessionExpiration()\n      return false\n    }\n  }\n\n  // Cleanup function\n  const cleanup = () => {\n    if (authStateSubscription) {\n      authStateSubscription.data.subscription.unsubscribe()\n      authStateSubscription = null\n    }\n    initialized.value = false\n  }\n\n  return {\n    user,\n    session,\n    adminUser,\n    loading,\n    initialized,\n    redirectUrl,\n    sessionExpired,\n    isAuthenticated,\n    isAdmin,\n    hasValidSession,\n    initialize,\n    signIn,\n    signOut,\n    resetPassword,\n    updatePassword,\n    checkAdminStatus,\n    handleSessionExpiration,\n    setRedirectUrl,\n    getAndClearRedirectUrl,\n    refreshSession,\n    recoverConnection,\n    validateSession,\n    cleanup\n  }\n})\n","import { ref, computed, watch } from 'vue'\nimport { defineStore } from 'pinia'\n\nexport interface SidebarState {\n  drawer: boolean\n  rail: boolean\n  scrollPosition: number\n  lastActiveRoute: string\n  userPreferences: {\n    autoCollapse: boolean\n    rememberScrollPosition: boolean\n    persistState: boolean\n  }\n}\n\nconst STORAGE_KEY = 'petsmart-admin-sidebar-state'\n\nexport const useSidebarStore = defineStore('sidebar', () => {\n  // Reactive state\n  const drawer = ref(true)\n  const rail = ref(false)\n  const scrollPosition = ref(0)\n  const lastActiveRoute = ref('')\n  const isInitialized = ref(false)\n\n  // User preferences\n  const userPreferences = ref({\n    autoCollapse: false,\n    rememberScrollPosition: true,\n    persistState: true\n  })\n\n  // Computed properties\n  const isExpanded = computed(() => drawer.value && !rail.value)\n  const isCollapsed = computed(() => rail.value)\n  const isClosed = computed(() => !drawer.value)\n\n  // Load state from localStorage\n  const loadState = (): SidebarState | null => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY)\n      if (stored) {\n        return JSON.parse(stored)\n      }\n    } catch (error) {\n      console.warn('Failed to load sidebar state from localStorage:', error)\n    }\n    return null\n  }\n\n  // Save state to localStorage\n  const saveState = () => {\n    if (!userPreferences.value.persistState) return\n\n    try {\n      const state: SidebarState = {\n        drawer: drawer.value,\n        rail: rail.value,\n        scrollPosition: scrollPosition.value,\n        lastActiveRoute: lastActiveRoute.value,\n        userPreferences: userPreferences.value\n      }\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(state))\n    } catch (error) {\n      console.warn('Failed to save sidebar state to localStorage:', error)\n    }\n  }\n\n  // Initialize state from localStorage or defaults\n  const initialize = (windowWidth: number) => {\n    const savedState = loadState()\n    \n    if (savedState && savedState.userPreferences.persistState) {\n      // Restore saved state\n      drawer.value = savedState.drawer\n      rail.value = savedState.rail\n      scrollPosition.value = savedState.scrollPosition || 0\n      lastActiveRoute.value = savedState.lastActiveRoute || ''\n      userPreferences.value = { ...userPreferences.value, ...savedState.userPreferences }\n    } else {\n      // Set defaults based on screen size\n      const isMobile = windowWidth <= 768\n      drawer.value = !isMobile\n      rail.value = false\n      scrollPosition.value = 0\n    }\n\n    isInitialized.value = true\n  }\n\n  // Update drawer state\n  const setDrawer = (value: boolean) => {\n    drawer.value = value\n    saveState()\n  }\n\n  // Toggle drawer\n  const toggleDrawer = () => {\n    setDrawer(!drawer.value)\n  }\n\n  // Update rail state\n  const setRail = (value: boolean) => {\n    rail.value = value\n    saveState()\n  }\n\n  // Toggle rail mode\n  const toggleRail = () => {\n    setRail(!rail.value)\n  }\n\n  // Update scroll position\n  const setScrollPosition = (position: number) => {\n    if (userPreferences.value.rememberScrollPosition) {\n      scrollPosition.value = position\n      saveState()\n    }\n  }\n\n  // Update last active route\n  const setLastActiveRoute = (route: string) => {\n    lastActiveRoute.value = route\n    saveState()\n  }\n\n  // Update user preferences\n  const updatePreferences = (newPreferences: Partial<typeof userPreferences.value>) => {\n    userPreferences.value = { ...userPreferences.value, ...newPreferences }\n    saveState()\n  }\n\n  // Handle responsive behavior\n  const handleResize = (windowWidth: number) => {\n    const isMobile = windowWidth <= 768\n    \n    if (isMobile) {\n      // On mobile, close drawer and disable rail\n      if (drawer.value) {\n        setDrawer(false)\n      }\n      if (rail.value) {\n        setRail(false)\n      }\n    } else {\n      // On desktop, restore drawer if it was closed due to mobile\n      if (!drawer.value && isInitialized.value) {\n        setDrawer(true)\n      }\n    }\n  }\n\n  // Reset to defaults\n  const reset = () => {\n    drawer.value = true\n    rail.value = false\n    scrollPosition.value = 0\n    lastActiveRoute.value = ''\n    userPreferences.value = {\n      autoCollapse: false,\n      rememberScrollPosition: true,\n      persistState: true\n    }\n    saveState()\n  }\n\n  // Clear stored state\n  const clearStoredState = () => {\n    try {\n      localStorage.removeItem(STORAGE_KEY)\n    } catch (error) {\n      console.warn('Failed to clear sidebar state from localStorage:', error)\n    }\n  }\n\n  // Watch for changes and auto-save\n  watch([drawer, rail], () => {\n    if (isInitialized.value) {\n      saveState()\n    }\n  })\n\n  return {\n    // State\n    drawer,\n    rail,\n    scrollPosition,\n    lastActiveRoute,\n    userPreferences,\n    isInitialized,\n    \n    // Computed\n    isExpanded,\n    isCollapsed,\n    isClosed,\n    \n    // Actions\n    initialize,\n    setDrawer,\n    toggleDrawer,\n    setRail,\n    toggleRail,\n    setScrollPosition,\n    setLastActiveRoute,\n    updatePreferences,\n    handleResize,\n    reset,\n    clearStoredState,\n    saveState,\n    loadState\n  }\n})\n"],"names":["useAuthStore","defineStore","user","ref","session","loading","adminUser","initialized","redirectUrl","sessionExpired","authStateSubscription","isAuthenticated","computed","isAdmin","hasValidSession","now","initialize","currentSession","error","supabase","handleSessionExpiration","checkAdminStatus","signOut","event","newSession","_a","setRedirectUrl","url","getAndClearRedirectUrl","storedUrl","data","supabaseAdmin","signIn","email","password","resolve","newPassword","nextTick","STORAGE_KEY","useSidebarStore","drawer","rail","scrollPosition","lastActiveRoute","isInitialized","userPreferences","isExpanded","isCollapsed","isClosed","loadState","stored","saveState","state","windowWidth","savedState","isMobile","setDrawer","value","toggleDrawer","setRail","toggleRail","setScrollPosition","position","setLastActiveRoute","route","updatePreferences","newPreferences","handleResize","reset","clearStoredState","watch"],"mappings":"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"}